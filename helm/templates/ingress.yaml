apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "{{ .Values.ingress.canary.enabled }}"
    nginx.ingress.kubernetes.io/canary-weight: "{{ .Values.ingress.canary.weight }}"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.ingress.host }}
    secretName: {{ .Release.Name }}-tls # Cert-Manager автоматично створить цей секрет
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myapp
            port:
              number: {{ .Values.service.port }}

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-monitoring-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "{{ .Values.ingress.canary.enabled }}"
    nginx.ingress.kubernetes.io/canary-weight: "{{ .Values.ingress.canary.weight }}"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.ingress.prometheus.host }}
    - {{ .Values.ingress.grafana.host }}
    secretName: {{ .Release.Name }}-tls # Cert-Manager автоматично створить цей секрет
  rules:
  - host: {{ .Values.ingress.prometheus.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.ingress.prometheus.svcName }}
            port:
              number: {{ .Values.ingress.prometheus.port }}
  - host: {{ .Values.ingress.grafana.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.ingress.grafana.svcName }}
            port:
              number: {{ .Values.ingress.grafana.port }}